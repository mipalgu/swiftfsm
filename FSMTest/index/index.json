{"interfaceLanguages":{"swift":[{"children":[{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/arrangementverifier\/init(arrangement:)","title":"init(arrangement: Arrangement)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/arrangementverifier\/generatekripkestructure(formats:)","title":"func generateKripkeStructure(formats: Set<View>) throws","type":"method"},{"path":"\/documentation\/fsmtest\/arrangementverifier\/generatekripkestructures(forschedule:formats:)","title":"func generateKripkeStructures<Schedule>(forSchedule: Schedule, formats: Set<View>) throws","type":"method"}],"path":"\/documentation\/fsmtest\/arrangementverifier","title":"ArrangementVerifier","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/init(model:actuators:externalvariables:globalvariables:sensors:)","title":"init(model: Model, actuators: [(PartialKeyPath<FSMTester<Model>.Environment>, AnyActuatorHandler)], externalVariables: [(PartialKeyPath<FSMTester<Model>.Environment>, AnyExternalVariableHandler)], globalVariables: [(PartialKeyPath<FSMTester<Model>.Environment>, AnyGlobalVariableHandler)], sensors: [(PartialKeyPath<FSMTester<Model>.Environment>, AnySensorHandler)])","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/context-swift.property","title":"let context: SchedulerContext<FSMTester<Model>.StateType, Model.Ringlet.Context, FSMTester<Model>.Context, FSMTester<Model>.Environment, FSMTester<Model>.Parameters, FSMTester<Model>.Result>","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/currentstate","title":"var currentState: FSMState<FSMTester<Model>.StateType, FSMTester<Model>.Parameters, FSMTester<Model>.Result, FSMTester<Model>.Context, FSMTester<Model>.Environment>","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/didtransition","title":"var didTransition: Bool","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/duration","title":"var duration: Duration","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/fsm","title":"let fsm: FiniteStateMachine<FSMTester<Model>.StateType, FSMTester<Model>.Ringlet, FSMTester<Model>.Parameters, FSMTester<Model>.Result, FSMTester<Model>.Context, FSMTester<Model>.Environment>","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/initialstate","title":"var initialState: FSMState<FSMTester<Model>.StateType, FSMTester<Model>.Parameters, FSMTester<Model>.Result, FSMTester<Model>.Context, FSMTester<Model>.Environment>","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/isfinished","title":"var isFinished: Bool","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/issuspended","title":"var isSuspended: Bool","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/previousstate","title":"var previousState: FSMState<FSMTester<Model>.StateType, FSMTester<Model>.Parameters, FSMTester<Model>.Result, FSMTester<Model>.Context, FSMTester<Model>.Environment>","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/suspendstate","title":"var suspendState: FSMState<FSMTester<Model>.StateType, FSMTester<Model>.Parameters, FSMTester<Model>.Result, FSMTester<Model>.Context, FSMTester<Model>.Environment>","type":"property"},{"path":"\/documentation\/fsmtest\/fsmtester\/suspendedstate","title":"var suspendedState: FSMState<FSMTester<Model>.StateType, FSMTester<Model>.Parameters, FSMTester<Model>.Result, FSMTester<Model>.Context, FSMTester<Model>.Environment>?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/next()","title":"func next() -> FSMTester<Model>.NextResult","type":"method"},{"path":"\/documentation\/fsmtest\/fsmtester\/ringlet()","title":"func ringlet() -> FSMTester<Model>.NextResult","type":"method"},{"path":"\/documentation\/fsmtest\/fsmtester\/savesnapshot()","title":"func saveSnapshot()","type":"method"},{"path":"\/documentation\/fsmtest\/fsmtester\/state(for:)","title":"func state(for: KeyPath<Model, StateInformation>) -> FSMState<FSMTester<Model>.StateType, FSMTester<Model>.Parameters, FSMTester<Model>.Result, FSMTester<Model>.Context, FSMTester<Model>.Environment>","type":"method"},{"path":"\/documentation\/fsmtest\/fsmtester\/takesnapshot()","title":"func takeSnapshot()","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/context-swift.typealias","title":"FSMTester.Context","type":"typealias"},{"path":"\/documentation\/fsmtest\/fsmtester\/environment","title":"FSMTester.Environment","type":"typealias"},{"path":"\/documentation\/fsmtest\/fsmtester\/parameters","title":"FSMTester.Parameters","type":"typealias"},{"path":"\/documentation\/fsmtest\/fsmtester\/result","title":"FSMTester.Result","type":"typealias"},{"path":"\/documentation\/fsmtest\/fsmtester\/ringlet","title":"FSMTester.Ringlet","type":"typealias"},{"path":"\/documentation\/fsmtest\/fsmtester\/statetype","title":"FSMTester.StateType","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/executing(transitioned:)","title":"case executing(transitioned: FSMStatus.TransitionType)","type":"case"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/finished","title":"case finished","type":"case"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/restarted(transitioned:)","title":"case restarted(transitioned: FSMStatus.TransitionType)","type":"case"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/resumed(transitioned:)","title":"case resumed(transitioned: FSMStatus.TransitionType)","type":"case"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/suspended(transitioned:)","title":"case suspended(transitioned: FSMStatus.TransitionType)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/init(status:context:)","title":"init(status: FSMStatus, context: SchedulerContext<FSMTester<Model>.StateType, FSMTester<Model>.Ringlet.Context, FSMTester<Model>.Context, FSMTester<Model>.Environment, FSMTester<Model>.Parameters, FSMTester<Model>.Result>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/didtransition","title":"var didTransition: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/fsmtest\/fsmtester\/nextresult\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/fsmtest\/fsmtester\/nextresult","title":"FSMTester.NextResult","type":"enum"}],"path":"\/documentation\/fsmtest\/fsmtester","title":"FSMTester","type":"class"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedactuator\/init(id:initialvalue:savesnapshot:)","title":"init(id: String, initialValue: Value, saveSnapshot: (Value) -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedactuator\/id-xzr","title":"let id: String","type":"property"},{"path":"\/documentation\/fsmtest\/mockedactuator\/initialvalue","title":"let initialValue: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedactuator\/savesnapshot(value:)","title":"func saveSnapshot(value: Value)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedactuator\/id-87doo","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/fsmtest\/mockedactuator\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"}],"path":"\/documentation\/fsmtest\/mockedactuator","title":"MockedActuator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/init(id:initialvalue:takesnapshot:savesnapshot:)","title":"init(id: String, initialValue: Value, takeSnapshot: () -> Value, saveSnapshot: (Value) -> Void)","type":"init"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/init(id:nonnilvalue:initialvalue:takesnapshot:savesnapshot:)","title":"init<T>(id: String, nonNilValue: T, initialValue: T?, takeSnapshot: () -> Value, saveSnapshot: (Value) -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/id-5rtcy","title":"let id: String","type":"property"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/initialvalue","title":"let initialValue: Value","type":"property"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/nonnilvalue","title":"let nonNilValue: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/savesnapshot(value:)","title":"func saveSnapshot(value: Value)","type":"method"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/takesnapshot()","title":"func takeSnapshot() -> Value","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedexternalvariable\/id-9c8wb","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/fsmtest\/mockedexternalvariable\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"}],"path":"\/documentation\/fsmtest\/mockedexternalvariable","title":"MockedExternalVariable","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/init(id:initialvalue:takesnapshot:savesnapshot:)","title":"init(id: String, initialValue: Value, takeSnapshot: () -> Value, saveSnapshot: (Value) -> Void)","type":"init"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/init(id:nonnilvalue:initialvalue:takesnapshot:savesnapshot:)","title":"init<T>(id: String, nonNilValue: T, initialValue: T?, takeSnapshot: () -> Value, saveSnapshot: (Value) -> Void)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/id-5tdms","title":"let id: String","type":"property"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/initialvalue","title":"let initialValue: Value","type":"property"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/nonnilvalue","title":"let nonNilValue: Value","type":"property"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/value","title":"var value: Value","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/takesnapshot()","title":"func takeSnapshot() -> Self.Value","type":"method"}],"path":"\/documentation\/fsmtest\/mockedglobalvariable\/globalvariablehandler-implementations","title":"GlobalVariableHandler Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedglobalvariable\/id-9fm8e","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/fsmtest\/mockedglobalvariable\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"}],"path":"\/documentation\/fsmtest\/mockedglobalvariable","title":"MockedGlobalVariable","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedsensor\/init(id:nonnilvalue:takesnapshot:)","title":"init<T>(id: String, nonNilValue: T, takeSnapshot: () -> Value)","type":"init"},{"path":"\/documentation\/fsmtest\/mockedsensor\/init(id:takesnapshot:)","title":"init(id: String, takeSnapshot: () -> Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedsensor\/id-3zxdc","title":"let id: String","type":"property"},{"path":"\/documentation\/fsmtest\/mockedsensor\/nonnilvalue","title":"let nonNilValue: Value","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedsensor\/takesnapshot()","title":"func takeSnapshot() -> Value","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/mockedsensor\/id-5fx9p","title":"var id: ObjectIdentifier","type":"property"}],"path":"\/documentation\/fsmtest\/mockedsensor\/identifiable-implementations","title":"Identifiable Implementations","type":"symbol"}],"path":"\/documentation\/fsmtest\/mockedsensor","title":"MockedSensor","type":"struct"},{"title":"Functions","type":"groupMarker"},{"path":"\/documentation\/fsmtest\/erase(_:mapsto:)-2bade","title":"func erase<Handler, Environment>(Handler, mapsTo: WritableKeyPath<Environment, EnvironmentProtocolWriteOnlyProperty<Handler.Value>>) -> (PartialKeyPath<Environment>, AnyActuatorHandler)","type":"func"},{"path":"\/documentation\/fsmtest\/erase(_:mapsto:)-7qfjy","title":"func erase<Handler, Environment>(Handler, mapsTo: WritableKeyPath<Environment, EnvironmentProtocolReadWriteProperty<Handler.Value>>) -> (PartialKeyPath<Environment>, AnyExternalVariableHandler)","type":"func"},{"path":"\/documentation\/fsmtest\/erase(_:mapsto:)-9fw7w","title":"func erase<Handler, Environment>(Handler, mapsTo: WritableKeyPath<Environment, EnvironmentProtocolReadOnlyProperty<Handler.Value>>) -> (PartialKeyPath<Environment>, AnySensorHandler)","type":"func"},{"path":"\/documentation\/fsmtest\/erase(_:mapsto:)-kruv","title":"func erase<Handler, Environment>(Handler, mapsTo: WritableKeyPath<Environment, EnvironmentProtocolReadWriteProperty<Handler.Value>>) -> (PartialKeyPath<Environment>, AnyGlobalVariableHandler)","type":"func"}],"path":"\/documentation\/fsmtest","title":"FSMTest","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}