{"interfaceLanguages":{"swift":[{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/init(caller:callee:parameters:method:)","title":"init(caller: FSMInformation, callee: FSMInformation, parameters: [Int : (DataStructure)?], method: Call.Method)","type":"init"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/_(_:_:)-4ssx6","title":"static func < (Call.Method, Call.Method) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/asynchronous","title":"case asynchronous","type":"case"},{"path":"\/documentation\/verification\/call\/method\/synchronous","title":"case synchronous","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/init(rawvalue:)","title":"init?(rawValue: String)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/'...(_:)-1zh05","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/verification\/call\/method\/'...(_:)-9rtoq","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/verification\/call\/method\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/verification\/call\/method\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/verification\/call\/method\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/verification\/call\/method\/_(_:_:)-83auh","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/verification\/call\/method\/_=(_:_:)-3somd","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/verification\/call\/method\/_=(_:_:)-5laqv","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/call\/method\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/call\/method\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/hashvalue","title":"var hashValue: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/method\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"},{"path":"\/documentation\/verification\/call\/method\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/verification\/call\/method\/rawrepresentable-implementations","title":"RawRepresentable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/call\/method","title":"Call.Method","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/verification\/call\/==(_:_:)","title":"static func == (Call, Call) -> Bool","type":"op"}],"path":"\/documentation\/verification\/call\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verification\/call\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/verification\/call\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/call","title":"Call","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/callchain\/init(root:calls:)","title":"init(root: Int, calls: [Call])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/callchain\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/callchain\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/callchain","title":"CallChain","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/executablepool\/init(executables:)","title":"init<S>(executables: S)","type":"init"}],"path":"\/documentation\/verification\/executablepool","title":"ExecutablePool","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequence\/init(_:_:)","title":"init(Base, (Base.Iterator.Element, Base.Iterator.Element) -> Bool)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequence\/base","title":"let base: Base","type":"property"},{"path":"\/documentation\/verification\/groupedsequence\/shouldgroup","title":"let shouldGroup: (Base.Element, Base.Element) -> Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequence\/makeiterator()","title":"func makeIterator() -> GroupedSequenceIterator<Base.Iterator>","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequence\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/verification\/groupedsequence\/lazy-6r4wb","title":"var lazy: LazySequence<Self.Elements>","type":"property"},{"path":"\/documentation\/verification\/groupedsequence\/lazy-8qejc","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequence\/compactmap(_:)-7r5fr","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/flatmap(_:)-29nt4","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/flatmap(_:)-6pix","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/joined()","title":"func joined() -> LazySequence<FlattenSequence<Self.Elements>>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/map(_:)-8uluz","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/verification\/groupedsequence\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequence\/lazy-7sy83","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/verification\/groupedsequence\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequence\/all(_:)","title":"func all((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/any(_:)","title":"func any((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/compactmap(_:)-4hhda","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/failmap(_:)","title":"func failMap<T>((Self.Iterator.Element) throws -> T?) rethrows -> [T]?","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/flatmap(_:)-3rq9d","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/flatmap(_:)-4vmun","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/joined(separator:)","title":"func joined<Separator>(separator: Separator) -> JoinedSequence<Self>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/map(_:)-4kv8t","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/none(_:)","title":"func none((Self.Element) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/sortedcollection(_:)","title":"func sortedCollection((Self.Iterator.Element, Self.Iterator.Element) -> ComparisonResult) -> SortedCollection<Self.Iterator.Element>","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/verification\/groupedsequence\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/verification\/groupedsequence\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/verification\/groupedsequence","title":"GroupedSequence","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequenceiterator\/init(_:_:)","title":"init(Base, (Base.Element, Base.Element) -> Bool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verification\/groupedsequenceiterator\/next()","title":"func next() -> [Base.Element]?","type":"method"}],"path":"\/documentation\/verification\/groupedsequenceiterator","title":"GroupedSequenceIterator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/schedule\/init(threads:)","title":"init(threads: [ScheduleThread])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/schedule\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/schedule\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/schedule","title":"Schedule","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/scheduleisolator\/init(schedule:pool:)","title":"init(schedule: Schedule, pool: ExecutablePool)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/verification\/scheduleisolator\/generatekripkestructures(formats:usingclocks:)","title":"func generateKripkeStructures(formats: Set<View>, usingClocks: Bool) throws","type":"method"}],"path":"\/documentation\/verification\/scheduleisolator","title":"ScheduleIsolator","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/schedulethread\/init(sections:)","title":"init(sections: [SnapshotSection])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/schedulethread\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/schedulethread\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/schedulethread","title":"ScheduleThread","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/snapshotsection\/init(timeslots:)","title":"init(timeslots: [Timeslot])","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/snapshotsection\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/snapshotsection\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/snapshotsection","title":"SnapshotSection","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/timeslot\/init(executables:callchain:externaldependencies:startingtime:duration:cyclesexecuted:)","title":"init(executables: Set<Int>, callChain: CallChain, externalDependencies: [ExecutableDependency], startingTime: Duration, duration: Duration, cyclesExecuted: UInt)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/timeslot\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/timeslot\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/timeslot","title":"Timeslot","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verification\/executabledependency\/async(id:)","title":"case async(id: Int)","type":"case"},{"path":"\/documentation\/verification\/executabledependency\/submachine(id:)","title":"case submachine(id: Int)","type":"case"},{"path":"\/documentation\/verification\/executabledependency\/sync(id:)","title":"case sync(id: Int)","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/executabledependency\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/verification\/executabledependency\/id","title":"var id: Int","type":"property"},{"path":"\/documentation\/verification\/executabledependency\/isasync","title":"var isAsync: Bool","type":"property"},{"path":"\/documentation\/verification\/executabledependency\/issubmachine","title":"var isSubMachine: Bool","type":"property"},{"path":"\/documentation\/verification\/executabledependency\/issync","title":"var isSync: Bool","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/executabledependency\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/executabledependency\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/executabledependency","title":"ExecutableDependency","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verification\/executabletype\/controllable(_:)","title":"case controllable(Executable)","type":"case"},{"path":"\/documentation\/verification\/executabletype\/parameterised(_:)","title":"case parameterised(Executable)","type":"case"}],"path":"\/documentation\/verification\/executabletype","title":"ExecutableType","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/verification\/view\/graphviz","title":"case graphviz","type":"case"},{"path":"\/documentation\/verification\/view\/nuxmv","title":"case nuXmv","type":"case"},{"path":"\/documentation\/verification\/view\/uppaal","title":"case uppaal","type":"case"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/verification\/view\/init(from:)","title":"init(from: Decoder) throws","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/verification\/view\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/verification\/view\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/verification\/view","title":"View","type":"enum"}],"path":"\/documentation\/verification","title":"Verification","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}